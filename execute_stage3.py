#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para executar a Terceira Etapa - Gera√ß√£o de M√≥dulos e Relat√≥rio Final
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# Adiciona src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def execute_stage3():
    """Executa a terceira etapa - Gera√ß√£o de m√≥dulos e relat√≥rio final"""
    
    try:
        # Carrega vari√°veis de ambiente
        from services.environment_loader import environment_loader
        
        # Importa servi√ßos necess√°rios
        from services.enhanced_module_processor import enhanced_module_processor
        from services.comprehensive_report_generator_v3 import comprehensive_report_generator_v3
        
        # Encontra a sess√£o mais recente
        analyses_dir = Path("analyses_data")
        session_dirs = [d for d in analyses_dir.iterdir() if d.is_dir() and d.name.startswith("session_")]
        
        if not session_dirs:
            logger.error("‚ùå Nenhuma sess√£o encontrada! Execute a primeira etapa primeiro.")
            return False
        
        # Ordena por timestamp (mais recente primeiro)
        session_dirs.sort(key=lambda x: x.name, reverse=True)
        latest_session = session_dirs[0]
        session_id = latest_session.name
        
        logger.info(f"üéØ Executando TERCEIRA ETAPA para sess√£o: {session_id}")
        
        # Verifica se existe s√≠ntese da segunda etapa
        sintese_path = latest_session / "resumo_sintese.json"
        if not sintese_path.exists():
            logger.warning(f"‚ö†Ô∏è S√≠ntese da segunda etapa n√£o encontrada: {sintese_path}")
            logger.info("üîÑ Continuando com dados dispon√≠veis da primeira etapa")
        
        # FASE 1: Gera√ß√£o dos 16 m√≥dulos especializados
        logger.info("üìù FASE 1: Gerando 16 m√≥dulos especializados")
        
        modules_result = await enhanced_module_processor.generate_all_modules(session_id)
        
        if not modules_result.get('successful_modules'):
            logger.error("‚ùå Falha na gera√ß√£o de m√≥dulos")
            return False
        
        logger.info(f"‚úÖ M√≥dulos gerados: {modules_result['successful_modules']}/{modules_result['total_modules']}")
        
        # FASE 2: Compila√ß√£o do relat√≥rio final
        logger.info("üìã FASE 2: Compilando relat√≥rio final")
        
        final_report_result = comprehensive_report_generator_v3.compile_final_markdown_report(session_id)
        
        if not final_report_result.get('success'):
            logger.error("‚ùå Falha na compila√ß√£o do relat√≥rio final")
            return False
        
        logger.info(f"‚úÖ Relat√≥rio final compilado: {final_report_result['report_path']}")
        
        # FASE 3: Gera√ß√£o de estat√≠sticas finais
        logger.info("üìä FASE 3: Gerando estat√≠sticas finais")
        
        final_statistics = {
            'session_id': session_id,
            'workflow_completed': True,
            'modules_generated': modules_result['successful_modules'],
            'modules_failed': modules_result['failed_modules'],
            'total_modules': modules_result['total_modules'],
            'success_rate': (modules_result['successful_modules'] / modules_result['total_modules']) * 100,
            'final_report_path': final_report_result['report_path'],
            'report_statistics': final_report_result.get('estatisticas_relatorio', {}),
            'completion_timestamp': datetime.now().isoformat()
        }
        
        # Salva estat√≠sticas finais
        from services.auto_save_manager import salvar_etapa
        salvar_etapa("terceira_etapa_concluida", final_statistics, categoria="workflow")
        
        # Salva tamb√©m na pasta da sess√£o
        stats_path = latest_session / "workflow_final_statistics.json"
        with open(stats_path, 'w', encoding='utf-8') as f:
            import json
            json.dump(final_statistics, f, ensure_ascii=False, indent=2)
        
        logger.info("‚úÖ TERCEIRA ETAPA CONCLU√çDA COM SUCESSO!")
        logger.info(f"üìä Taxa de sucesso: {final_statistics['success_rate']:.1f}%")
        logger.info(f"üìã Relat√≥rio final: {final_report_result['report_path']}")
        logger.info(f"üìà Estat√≠sticas: {stats_path}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico na terceira etapa: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ ARQV30 Enhanced v3.0 - TERCEIRA ETAPA")
    print("=" * 50)
    
    # Executa terceira etapa
    success = asyncio.run(execute_stage3())
    
    if success:
        print("\n‚úÖ TERCEIRA ETAPA CONCLU√çDA COM SUCESSO!")
        print("üéâ WORKFLOW COMPLETO - Todos os m√≥dulos e relat√≥rio final gerados!")
    else:
        print("\n‚ùå TERCEIRA ETAPA FALHOU!")
        print("üîß Verifique os logs para mais detalhes")